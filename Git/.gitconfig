[alias]
    # List all the aliases
    aliases = "!f() { git config --list | grep alias | cut -c 7- | awk -F'=' '{printf(\"%-10s %s\\n\", $1, $2)}'; }; f"
[alias]
    # section: short names
    br = branch
    ci = commit
    co = checkout
    cp = cherry-pick
    rb = rebase
    st = status
[alias]
    # section: shorthands for useful arguments
    ahead = log --oneline @{push}..
    ahead-diff = diff @{push}..
    behind = log --oneline ..@{upstream}
    cpc = cherry-pick --continue
    diffall = difftool --dir-diff
    # Update local branch from its remote counterpart (if it can be fast-forwarded), without needing to check it out
    fetchup = "!f() { git fetch origin $1:$1; }; f"
    l = log --oneline
    please = push --force-with-lease
    pushu = push --set-upstream origin HEAD
    reseto = reset --hard @{push}
    rbc = rebase --continue
    s = status --short --branch
    stashiu = stash --include-untracked
    stashki = stash --keep-index
[alias]
    # section: utility scripts
    # Delete local branches whose remote counterparts have been deleted (e.g. merged pull requests)
    delete-gone = "!f() { git fetch --prune && git branch -vv | grep ': gone]' | awk '{print $1}' | xargs git branch -d; }; f"
    # Move (rename) local branch and its remote counterpart, without needing to check it out
    move-branch = "!f() { git branch --move $1 $2; git push origin --delete $1; git push --set-upstream origin $2; }; f"
[color "branch"]
    # Use a lighter blue for "git branch -vv"; the default is unreadable on black background
    upstream = bold blue
[core]
    # Line endings - checkout as-is, commit as-is. This is the default, but the installer does ask.
    autocrlf = false
    # Alternative to denote comment lines in commit messages, when standards require messages to start with a hash-prefixed issue number
    # commentchar = ";"
    # Ignore files' executable bit changed on broken file systems, resulting in them being marked as changed
    fileMode = false
    # File system cache in Git for Windows (enabled by default from 2.8.2)
    fscache = true
    # Long paths support in Git for Windows, useful if deep node_modules have been checked in
    longpaths = true
    # Make diffs more readable (https://github.com/so-fancy/diff-so-fancy)
    pager = diff-so-fancy | less --tabs=4 -RFX
    # Enable parallelism to improve performance (enabled by default from 2.1.0)
    preloadindex = true
[diff]
    # Color moved blocks (20+ alphanumeric characters) as moves instead of additions & deletions. (requires 2.17.0)
    colorMoved = default
    # Ignore indentation changes when detecting moved blocks; these are common when refactoring (requires 2.18.0)
    colorMovedWS = allow-indentation-change
    guitool = kdiff3
    # Consider more files than the defaults (diff: 400, merge: 1000), for large refactorings
    renameLimit = 5000
[difftool "kdiff3"]
    path = C:/Program Files/KDiff3/kdiff3.exe
[fetch]
    # Remove references to remote branches that no longer exist
    prune = true
[gui]
    # Don't use the default system encoding
    encoding = utf-8
    # Turn off loose objects popup that appears on launch
    gcwarning = false
[merge]
    tool = kdiff3
[mergetool "kdiff3"]
    path = C:/Program Files/KDiff3/kdiff3.exe
[pull]
    # Refuse to merge when pulling if local & remote have diverged (useful for rebase-based workflow)
    ff = only
[push]
    # Squelch the warning about new default behaviour in Git 2.0
    default = simple
[rebase]
    # Stop rebase if any lines deleted. Drop commits explicitly using "drop" or "d".
    missingCommitsCheck = error
[sequence]
    # Use VSCode as editor for rebase todo-list
    editor = code --wait
[submodule]
    # Make commands recurse into submodules, to avoid needing to do "git submodule update" after pull
    recurse = true
[user]
    name = YOUR NAME
    # Should match configured email on repo hosting (e.g. GitHub), so it can associate your commits with your user
    email = YOUR EMAIL
